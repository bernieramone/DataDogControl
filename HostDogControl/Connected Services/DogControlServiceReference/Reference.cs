//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HostDogControl.DogControlServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Dog", Namespace="http://schemas.datacontract.org/2004/07/ServiceDogControl")]
    [System.SerializableAttribute()]
    public partial class Dog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string breedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ownerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string breed {
            get {
                return this.breedField;
            }
            set {
                if ((object.ReferenceEquals(this.breedField, value) != true)) {
                    this.breedField = value;
                    this.RaisePropertyChanged("breed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string owner {
            get {
                return this.ownerField;
            }
            set {
                if ((object.ReferenceEquals(this.ownerField, value) != true)) {
                    this.ownerField = value;
                    this.RaisePropertyChanged("owner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string size {
            get {
                return this.sizeField;
            }
            set {
                if ((object.ReferenceEquals(this.sizeField, value) != true)) {
                    this.sizeField = value;
                    this.RaisePropertyChanged("size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DogControlServiceReference.IDogService")]
    public interface IDogService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/GetAllDogs", ReplyAction="http://tempuri.org/IDogService/GetAllDogsResponse")]
        HostDogControl.DogControlServiceReference.Dog[] GetAllDogs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/GetAllDogs", ReplyAction="http://tempuri.org/IDogService/GetAllDogsResponse")]
        System.Threading.Tasks.Task<HostDogControl.DogControlServiceReference.Dog[]> GetAllDogsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/GetDog", ReplyAction="http://tempuri.org/IDogService/GetDogResponse")]
        HostDogControl.DogControlServiceReference.Dog GetDog(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/GetDog", ReplyAction="http://tempuri.org/IDogService/GetDogResponse")]
        System.Threading.Tasks.Task<HostDogControl.DogControlServiceReference.Dog> GetDogAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/DeleteDog", ReplyAction="http://tempuri.org/IDogService/DeleteDogResponse")]
        bool DeleteDog(HostDogControl.DogControlServiceReference.Dog dog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/DeleteDog", ReplyAction="http://tempuri.org/IDogService/DeleteDogResponse")]
        System.Threading.Tasks.Task<bool> DeleteDogAsync(HostDogControl.DogControlServiceReference.Dog dog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/UpdateDog", ReplyAction="http://tempuri.org/IDogService/UpdateDogResponse")]
        bool UpdateDog(HostDogControl.DogControlServiceReference.Dog dog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/UpdateDog", ReplyAction="http://tempuri.org/IDogService/UpdateDogResponse")]
        System.Threading.Tasks.Task<bool> UpdateDogAsync(HostDogControl.DogControlServiceReference.Dog dog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/CreateDog", ReplyAction="http://tempuri.org/IDogService/CreateDogResponse")]
        bool CreateDog(HostDogControl.DogControlServiceReference.Dog dog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDogService/CreateDog", ReplyAction="http://tempuri.org/IDogService/CreateDogResponse")]
        System.Threading.Tasks.Task<bool> CreateDogAsync(HostDogControl.DogControlServiceReference.Dog dog);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDogServiceChannel : HostDogControl.DogControlServiceReference.IDogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DogServiceClient : System.ServiceModel.ClientBase<HostDogControl.DogControlServiceReference.IDogService>, HostDogControl.DogControlServiceReference.IDogService {
        
        public DogServiceClient() {
        }
        
        public DogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public HostDogControl.DogControlServiceReference.Dog[] GetAllDogs() {
            return base.Channel.GetAllDogs();
        }
        
        public System.Threading.Tasks.Task<HostDogControl.DogControlServiceReference.Dog[]> GetAllDogsAsync() {
            return base.Channel.GetAllDogsAsync();
        }
        
        public HostDogControl.DogControlServiceReference.Dog GetDog(int id) {
            return base.Channel.GetDog(id);
        }
        
        public System.Threading.Tasks.Task<HostDogControl.DogControlServiceReference.Dog> GetDogAsync(int id) {
            return base.Channel.GetDogAsync(id);
        }
        
        public bool DeleteDog(HostDogControl.DogControlServiceReference.Dog dog) {
            return base.Channel.DeleteDog(dog);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDogAsync(HostDogControl.DogControlServiceReference.Dog dog) {
            return base.Channel.DeleteDogAsync(dog);
        }
        
        public bool UpdateDog(HostDogControl.DogControlServiceReference.Dog dog) {
            return base.Channel.UpdateDog(dog);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDogAsync(HostDogControl.DogControlServiceReference.Dog dog) {
            return base.Channel.UpdateDogAsync(dog);
        }
        
        public bool CreateDog(HostDogControl.DogControlServiceReference.Dog dog) {
            return base.Channel.CreateDog(dog);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDogAsync(HostDogControl.DogControlServiceReference.Dog dog) {
            return base.Channel.CreateDogAsync(dog);
        }
    }
}
