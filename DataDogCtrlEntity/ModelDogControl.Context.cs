//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataDogCtrlEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DogsControlDBEntities : DbContext
    {
        public DogsControlDBEntities()
            : base("name=DogsControlDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dog> Dogs { get; set; }
    
        public virtual int CreateDog(string name, string owner, string breed, string size)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var breedParameter = breed != null ?
                new ObjectParameter("breed", breed) :
                new ObjectParameter("breed", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateDog", nameParameter, ownerParameter, breedParameter, sizeParameter);
        }
    
        public virtual int DeleteDog(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDog", idParameter);
        }
    
        public virtual ObjectResult<Dog> GetAllDogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dog>("GetAllDogs");
        }
    
        public virtual ObjectResult<Dog> GetAllDogs(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dog>("GetAllDogs", mergeOption);
        }
    
        public virtual ObjectResult<Dog> GetDogId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dog>("GetDogId", idParameter);
        }
    
        public virtual ObjectResult<Dog> GetDogId(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dog>("GetDogId", mergeOption, idParameter);
        }
    
        public virtual int UpdateDog(Nullable<int> id, string name, string owner, string breed, string size)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var breedParameter = breed != null ?
                new ObjectParameter("breed", breed) :
                new ObjectParameter("breed", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDog", idParameter, nameParameter, ownerParameter, breedParameter, sizeParameter);
        }
    }
}
